/*
	This file was generated by BeXL
	Copyright (c) 2000 Simon Huet
*/

#include <string.h>
#include <Application.h>
#include "message_labels.h"
#include "LJAccount.h"
#include <ListView.h>

#include "LJApplication.h"
#include "ResponseBlockManager.h"
#include "FriendListItem.h"
#include <OS.h>

#include <string>


LJAccount::LJAccount()
 : BWindow(BRect(100, 100, 461, 355), "Account Manager", B_TITLED_WINDOW, B_NOT_ZOOMABLE | B_NOT_H_RESIZABLE | B_NOT_V_RESIZABLE, B_CURRENT_WORKSPACE)
{

	MainView = new BView(BRect(0, 0, 361, 255), "View", B_FOLLOW_TOP_BOTTOM | B_FOLLOW_LEFT_RIGHT, B_WILL_DRAW | B_NAVIGABLE);
	MainView->SetViewColor((rgb_color) {216,216,216,255});
			tabview1 = new BTabView(BRect(3, 5, 358, 251), "View", B_WIDTH_FROM_WIDEST, B_FOLLOW_TOP_BOTTOM | B_FOLLOW_LEFT_RIGHT, B_FULL_UPDATE_ON_RESIZE|B_WILL_DRAW|B_NAVIGABLE_JUMP|B_FRAME_EVENTS|B_NAVIGABLE);
	viewfriends = new LJViewFriends();
	viewfriendof = new LJViewFriendsOf();
	viewHistory = new LJViewHistory();
	AddChild(MainView);
	MainView->AddChild(tabview1);
	tabview1->AddTab(viewfriends, new BTab());
	tabview1->AddTab(viewfriendof, new BTab());
	tabview1->AddTab(viewHistory, new BTab());
	MainView->SetViewColor((rgb_color) {216,216,216,255});
	tabview1->Select(0);
	accept_closing = false;
	tabview1->Select(0);
}

LJAccount::~LJAccount(void)
{

}

bool
LJAccount::QuitRequested(void)
{

	Hide();
	return false;

}

static int32 wait_filllist(void *data)
{
	LJAccount *w = (LJAccount *)data;
	status_t status;
	
	w->viewfriends->FillList();
	w->viewfriendof->FillList();
	wait_for_thread(w->viewfriends->fill_thread, &status);
	wait_for_thread(w->viewfriendof->fill_thread, &status);
	w->CompareLists();
	
	return B_OK;
}

void
LJAccount::FillList(void)
{	
	thread_id fill_thread = spawn_thread(wait_filllist, "wait_filllist", B_NORMAL_PRIORITY, this);
	resume_thread(fill_thread);
}

void
LJAccount::CompareLists(void)
{
	Lock();
	FriendListItem	*friend_item;
	FriendListItem	*friendof_item;
	
	for (int i=0; i<viewfriendof->friends_list->CountItems(); i++)
	{
		friendof_item = (FriendListItem *) viewfriendof->friends_list->ItemAt(i);
		friendof_item->status = false;
		for (int j=0; j<viewfriends->friends_list->CountItems(); j++){
			friend_item = (FriendListItem *) viewfriends->friends_list->ItemAt(j);
			if (!strcmp(friendof_item->name, friend_item->name)){
				friendof_item->status = true;
				break;
			}
		}
		int32 index = viewfriendof->friends_list->IndexOf(friendof_item);
		viewfriendof->friends_list->InvalidateItem(index);		
	}
	Unlock();
}

void
LJAccount::CleanUp(void)
{
	Lock();
	if (!viewfriends->friends_list->IsEmpty()) viewfriends->friends_list->MakeEmpty();
	if (!viewfriendof->friends_list->IsEmpty()) viewfriendof->friends_list->MakeEmpty();
	if (!viewHistory->history_list->IsEmpty()) viewHistory->history_list->MakeEmpty();
	Unlock();
}

void
LJAccount::MessageReceived(BMessage *message)
{
    switch (message->what) {
        case HISTORY_LIST_JOURNAL_MSG: {
            viewHistory->MessageReceived(message);
            break;
        }
        default: {
            BWindow::MessageReceived(message);
        }
    }
}
